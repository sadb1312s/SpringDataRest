package com.company.controller;

import com.company.entity.helpentity.BookBuy;
import com.company.entity.helpentity.NamePrice;
import com.company.entity.tableentity.Book;
import com.company.service.BookService;
import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.*;

@RestController
@RequestMapping("/book")
public class BookController {
    @Autowired
    private BookService bookService;

    @DeleteMapping("/delete/{id}")
    public void deletePerson(@PathVariable int id){
        bookService.delete(id);
    }

    @PostMapping("/create")
    @ApiOperation("createBook, id is generated by postgresql, leave the value at 0")
    public void createBook(@RequestBody Book book){
        bookService.save(book);
    }

    @GetMapping ("/find/all")
    public List<Book> findAll () {
        return bookService.findAll();
    }

    @GetMapping("/find/{id}")
    public Book findById(@PathVariable int id){
        return bookService.findById(id);
    }

    @PutMapping("/updateFull")
    public void updateFull(@RequestBody Book book){
        bookService.updateFull(book);
    }


    @PatchMapping("/update")
    @ApiResponses(value = {
            @ApiResponse(code = 409, message = "incorrect fields names")
    }
    )
    public void update(@RequestParam int id, @RequestBody Map<String,String> data){
        bookService.update(id, data);
    }

    @GetMapping("/namePrice")
    @ApiOperation("namePrice, ex 2.a return book title and price")
    public List<NamePrice> namePrice(){
        return bookService.getBookTitlePrice();

    }

    @GetMapping("/namePrice/condition")
    @ApiOperation("namePricesCondition, ex 3.c return book param if title contains \"Windows\" or price > 20000")
    public List<NamePrice> namePricesCondition(){
        return bookService.getWithCondition();
    }

    @GetMapping("/bookBuySummaryInfo")
    @ApiOperation("bookBuySummaryInfo, ex 4.d book with count > 10, summary info about all buying")
    public List<BookBuy> bookBuySummaryInfo(){
        return bookService.getBookBuyInfo();
    }

}
